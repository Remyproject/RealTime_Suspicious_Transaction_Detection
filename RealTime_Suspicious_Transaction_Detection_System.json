{
  "name": "Real-Time Suspicious Transaction Detection System",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "==Analyze this bank transaction for suspicious activity. Be very strict with high amounts.\n\nTRANSACTION DETAILS:\nTransactionID: {{ $json[\"row_no\"] }}\nDate: {{ $json[\"Txn Date\"] }}\nDescription: {{ $json[\"Description\"] }}\nAmount: {{ $json[\"Amount\"] }}\nType: {{ $json[\"Type\"] }}\n\nPRE-PROCESSING INSTRUCTIONS:\n- If \"Txn Date\" looks like a numeric value (e.g., 45748), treat it as a Google Sheets date serial and convert it to a human-readable format (yyyy-mm-dd).\n- If \"Description\" contains angle brackets <...> or line breaks, remove them for clarity.\n- Convert Amount from ₦ format (e.g., ₦750,000) to a numeric value.\n\nDETECTION RULES:\n1. ANY transaction above ₦500,000 = SUSPICIOUS (unless clearly legitimate like salary)\n2. ANY transaction above ₦100,000 with unclear description = SUSPICIOUS\n3. Transactions below ₦10,000 = SAFE (unless repeated unusual patterns)\n4. Multiple transactions to same unclear recipient = SUSPICIOUS\n5. Transactions with suspicious keywords (cash, wire, crypto, unknown, foreign) = SUSPICIOUS\n6. Any transaction to the same account multiple times within 3 minutes = SUSPICIOUS\n\nANALYSIS:\nConvert the amount to numbers by removing ₦ and commas, then compare numerically.\n\n---\n\nSTRUCTURED RETURN FORMAT (respond exactly in this format):\n\nTransaction ID: [row number here]  \nTxn Date: [converted date in yyyy-mm-dd]  \nAmount: [just the numeric amount]  \nType: [Credit or Debit]  \nDescription: [cleaned description]\n\nIs this suspicious? YES or NO  \nReason: [one clear sentence why or why not]\n",
        "options": {}
      },
      "name": "LLM - Anomaly Check",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        160,
        240
      ],
      "id": "4f6f8e9d-b4f5-4ac3-a8de-3d690e513180"
    },
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        160,
        400
      ],
      "id": "4c94fa46-bbfa-40be-bb4d-d15a8219edfb",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "RUDlRyFELTx0d54J",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1WLBnYDNLc-jpMAViH-L6u1nSMSDG0RJndewlHKDCLck",
          "mode": "list",
          "cachedResultName": "My transaction state",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WLBnYDNLc-jpMAViH-L6u1nSMSDG0RJndewlHKDCLck/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "transactionsample",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WLBnYDNLc-jpMAViH-L6u1nSMSDG0RJndewlHKDCLck/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRange"
            }
          }
        }
      },
      "name": "New/Updated Transaction",
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        -60,
        240
      ],
      "id": "0209698f-a970-4d18-bb0f-965ee75bb608",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "QIcsqbJdfxLCkfPd",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// === Get LLM response ===\nconst llmText = $json.output || $json.answer || $json.content || \"\";\n\n// === Extract fields ===\nconst transactionId = llmText.match(/Transaction ID:\\s*(\\d+)/i)?.[1] ?? \"Unknown\";\n\n// Clean and isolate date\nconst rawDateMatch = llmText.match(/Txn Date:\\s*([^\\n]+)/i);\nlet rawDate = rawDateMatch?.[1]?.trim() ?? \"\";\nrawDate = rawDate.replace(/\\s*\\(.*?\\)/g, '').trim();\n\n// === Updated Date Parser (forces 2025) ===\nfunction parseDateSmart(dateInput) {\n  if (!dateInput) return \"\";\n  let resultDate;\n\n  if (dateInput.includes(\"-\")) {\n    resultDate = new Date(dateInput);\n  } else {\n    const serial = parseInt(dateInput);\n    if (!isNaN(serial)) {\n      const base = new Date(1899, 11, 30);\n      base.setDate(base.getDate() + serial);\n      resultDate = base;\n    } else {\n      return dateInput;\n    }\n  }\n\n  // Force year to 2025\n  resultDate.setFullYear(2025);\n  return resultDate.toISOString().split(\"T\")[0];\n}\nconst txnDate = parseDateSmart(rawDate);\n\nconst amountRaw = llmText.match(/Amount:\\s*([\\d.,]+)/i)?.[1]?.trim() ?? \"0\";\nconst type = llmText.match(/Type:\\s*(Debit|Credit)/i)?.[1]?.trim() ?? \"Unknown\";\nconst description = llmText.match(/Description:\\s*([^\\n]+)/i)?.[1]?.trim() ?? \"No Description\";\nconst isSuspicious = llmText.match(/Is this suspicious\\?\\s*(YES|NO)/i)?.[1]?.toUpperCase() ?? \"NO\";\nconst reason = llmText.match(/Reason:\\s*([^\\n]+)/i)?.[1]?.trim() ?? \"No specific reason provided\";\n\n// Clean amount\nfunction extractAmount(str) {\n  const clean = str.replace(/[^\\d.]/g, '');\n  const parsed = parseFloat(clean);\n  return isNaN(parsed) ? \"0\" : Math.abs(parsed).toString();\n}\nconst amount = extractAmount(amountRaw);\n\n// Categorize\nfunction categorizeTransaction(desc) {\n  const d = desc.toLowerCase();\n  if (d.includes('airtime') || d.includes('mtn') || d.includes('glo')) return 'Airtime/Data';\n  if (d.includes('grocery') || d.includes('market') || d.includes('food')) return 'Grocery Shopping';\n  if (d.includes('rent') || d.includes('electricity')) return 'House Expenses';\n  if (d.includes('shopping') || d.includes('mall')) return 'Shopping';\n  if (d.includes('transfer') || d.includes('payment') || d.includes('wire')) return 'Transfer/Payment';\n  if (d.includes('atm') || d.includes('withdrawal')) return 'Cash Withdrawal';\n  if (d.includes('fuel') || d.includes('transport')) return 'Fuel/Transport';\n  if (d.includes('medical') || d.includes('hospital') || d.includes('pharmacy')) return 'Medical/Health';\n  return 'Undefined';\n}\nconst category = categorizeTransaction(description);\n\n// Final Output\nreturn {\n  json: {\n    \"Transaction ID\": transactionId,\n    \"Txn Date\": txnDate,\n    \"Description\": description,\n    \"Amount\": amount,\n    \"Type\": type,\n    \"Category\": category,\n    \"Is this suspicious?\": isSuspicious,\n    \"Reason\": reason,\n    \"Anomaly Flag\": isSuspicious === \"YES\" ? \"TRUE\" : \"FALSE\"\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        240
      ],
      "id": "836f2490-0ad6-402a-938e-dadfd0b7339c",
      "name": "Apply Rule-Based Detection"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b042212b-3912-4ea8-bc5f-b7d2f39a0042",
              "name": "Txn Date",
              "value": "={{ $json['Txn Date'] }}",
              "type": "string"
            },
            {
              "id": "501ff07f-52a7-4acb-83da-4c94e73232b0",
              "name": "Description",
              "value": "={{ $json.Description }}",
              "type": "string"
            },
            {
              "id": "3bfecc50-cb0f-4d4f-8eef-0b133bd96b03",
              "name": "Amount",
              "value": "={{ $json.Amount }}",
              "type": "string"
            },
            {
              "id": "7bf9d887-8ffe-463d-9bcf-e90e38e9a67b",
              "name": "Type",
              "value": "={{ $json.Type }}",
              "type": "string"
            },
            {
              "id": "50ea8675-ce28-43cd-9df8-a6be091126f3",
              "name": "Reason",
              "value": "={{ $json.Reason }}",
              "type": "string"
            },
            {
              "id": "42ba93d4-15d1-4f83-ac0f-79e8f6c23384",
              "name": "Anomaly Flag",
              "value": "={{ $json['Anomaly Flag'] }}",
              "type": "string"
            },
            {
              "id": "3a80c249-46ec-4fde-bdd6-cecf0339737e",
              "name": "Is this suspicious?",
              "value": "={{ $json['Is this suspicious?'] }}",
              "type": "string"
            },
            {
              "id": "85c3bb7c-0c99-483c-bd07-20faee486f0c",
              "name": "Row Number",
              "value": "={{ $json['Transaction ID'] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        240
      ],
      "id": "9f1f1a11-02c9-4dd7-bf08-2ab0fd75cd1d",
      "name": "Format Fields for Output"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1WLBnYDNLc-jpMAViH-L6u1nSMSDG0RJndewlHKDCLck",
          "mode": "list",
          "cachedResultName": "My transaction state",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WLBnYDNLc-jpMAViH-L6u1nSMSDG0RJndewlHKDCLck/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1978684533,
          "mode": "list",
          "cachedResultName": "Sheet3",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1WLBnYDNLc-jpMAViH-L6u1nSMSDG0RJndewlHKDCLck/edit#gid=1978684533"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Txn ": "={{ $json['Txn Date'] }}",
            " Description": "={{ $json.Description }}",
            "Is this suspicious? ": "={{ $json['Is this suspicious?'] }}",
            "Type ": "={{ $json.Type }}",
            " Amount ": "={{ $json.Amount }}",
            "Date": "={{ $json['Txn Date'] }}",
            "Anomaly Flag": "={{ $json['Anomaly Flag'] }}",
            "Reason ": "={{ $json.Reason }}",
            "Record_ID": "={{ $json['Row Number'] }}"
          },
          "matchingColumns": [
            "Record_ID"
          ],
          "schema": [
            {
              "id": "Record_ID",
              "displayName": "Record_ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Txn ",
              "displayName": "Txn ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " Description",
              "displayName": " Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": " Amount ",
              "displayName": " Amount ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Type ",
              "displayName": "Type ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Is this suspicious? ",
              "displayName": "Is this suspicious? ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Reason ",
              "displayName": "Reason ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Anomaly Flag",
              "displayName": "Anomaly Flag",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1200,
        140
      ],
      "id": "9da8e948-64df-45c7-8b25-5d119fe25e81",
      "name": "Save to Flagged Output Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "S3t5ZS85iPr7ZnV1",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json[\"Anomaly Flag\"] }}",
              "value2": "=TRUE"
            },
            {}
          ]
        }
      },
      "name": "Check If Anomaly (Is Transaction Suspicious?)",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        980,
        240
      ],
      "id": "c873342f-9638-41f8-808c-a6290a3c6c0a"
    },
    {
      "parameters": {
        "sendTo": "folohunsoremilekun@gmail.com",
        "subject": "Subject: 🚨 Anomaly Detected on your Account",
        "message": "=<h2>⚠️ Suspicious Transaction Detected</h2>\n\n<ul>\n  <li><strong>Transaction ID:</strong> {{$json[\"Record_ID\"]}}</li>\n  <li><strong>Date:</strong> {{$json[\"Date\"]}}</li>\n  <li><strong>Type:</strong> {{$json['Type ']}}</li>\n  <li><strong>Amount:</strong> ₦{{$json[' Amount ']}}</li>\n  <li><strong>Description:</strong> {{$json[' Description']}}</li>\n  <li><strong>Flagged:</strong> {{$json[\"Anomaly Flag\"]}}</li>\n  <li><strong>Reason:</strong> {{$json['Reason ']}}</li>\n</ul>\n\n<hr>\n<small style=\"color:gray;\">Generated automatically by your Transaction Monitor (n8n)</small>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1420,
        240
      ],
      "id": "01d15a36-1784-48c2-aaa1-16fc939985d5",
      "name": "Send Email Alert (If Suspicious)1",
      "webhookId": "103bcd7a-53fb-4264-822c-f6ae09b09a40",
      "credentials": {
        "gmailOAuth2": {
          "id": "GSeukdnTLusnwCLb",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "content": "## New Transaction Detected\n\n**Triggers** when a new transaction row is added to the Google Sheet.",
        "width": 220
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -140,
        380
      ],
      "typeVersion": 1,
      "id": "444b3385-5a41-41d5-99d6-e4b0538b8727",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "\n**Sends the transaction to LLM with rules + returns risk verdict + reason**",
        "height": 80,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        140,
        140
      ],
      "typeVersion": 1,
      "id": "1102c698-de39-4ea1-b269-892430ad19fb",
      "name": "Sticky Note1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        440
      ],
      "typeVersion": 1,
      "id": "f6aac97e-3d57-401c-826e-ee6719d8f976",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "LLM - Anomaly Check": {
      "main": [
        [
          {
            "node": "Apply Rule-Based Detection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "LLM - Anomaly Check",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "New/Updated Transaction": {
      "main": [
        [
          {
            "node": "LLM - Anomaly Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Rule-Based Detection": {
      "main": [
        [
          {
            "node": "Format Fields for Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Fields for Output": {
      "main": [
        [
          {
            "node": "Check If Anomaly (Is Transaction Suspicious?)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Flagged Output Sheet": {
      "main": [
        [
          {
            "node": "Send Email Alert (If Suspicious)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Anomaly (Is Transaction Suspicious?)": {
      "main": [
        [
          {
            "node": "Save to Flagged Output Sheet",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a0aec648-7b5c-41e8-af1a-2f9a057a17ea",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "38e524b8d238be40853f2785de3cb9335346aa612e73a5ec0f7147c1a79141e4"
  },
  "id": "8ekX91OPXuKswGYF",
  "tags": []
}